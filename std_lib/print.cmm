/*
C-- STANDARD LIB PRINT

Requires:
 - STD_LIB
 - VIDEO
 - MATH
*/

// TEXT BUFFER GLOBALS
// (color must be a value between 0 and 15)
int FG_COLOR = 0;
int BG_COLOR = 0;

int  CURSOR   = 0;
int  CURSOR_X = 0;
int  CURSOR_Y = 0;

/*  SET CURSOR - Set the cursor to a given pos
    
    Args:
     * X - X position
     * Y - Y position

    Returns:
     bool - false if given an illegal position
*/
int set_cursor(char x char y) {
    if ((x >= VIDEO_TILE_WIDTH) | (y >= VIDEO_TILE_HEIGHT)) return 0;

    CURSOR_X = x;
    CURSOR_Y = y;
    CURSOR   = x + y * VIDEO_TILE_WIDTH;

    return 1;
}

/*  ADVANCE CURSOR - Advance the cursor one step
    
    Args:

    Returns:
     void -
*/
int advance_cursor() {
    CURSOR = CURSOR + 1;
    // Still inside bounds, update x, y
    if (CURSOR < VIDEO_TILES) {
        CURSOR_X = CURSOR_X + 1;

        if (CURSOR_X >= VIDEO_TILE_WIDTH) {
            CURSOR_X = 0;
            CURSOR_Y = CURSOR_Y + 1;
        }
    }
    // Outside screen bounds, reset!
    else {
        CURSOR   = 0;
        CURSOR_X = 0;
        CURSOR_Y = 0;
    }
}

/*  BACK CURSOR - Back the cursor one step
    
    Args:

    Returns:
     void -
*/
int back_cursor() {
    if (CURSOR == 0) return 0;

    CURSOR = CURSOR - 1;
    // Still inside bounds, update x, y
    if (CURSOR < VIDEO_TILES) {
        CURSOR_X = CURSOR_X - 1;

        if (CURSOR_X < 0) {
            CURSOR_X = 0;
            CURSOR_Y = CURSOR_Y - 1;
        }
    }
    // Outside screen bounds, reset!
    else {
        CURSOR   = VIDEO_TILES - 1;
        CURSOR_X = VIDEO_TILE_WIDTH;
        CURSOR_Y = VIDEO_TILE_HEIGHT;
    }
}

/*  ADVANCE STEPS - Advance the cursor a specified number of steps
                    NOTE: Costly operation!
    
    Args:
     * Steps - Number of steps to advance (less than VIDEO_TILES)

    Returns:
     bool - false if given illegal input
*/
int advance_steps(int steps) {
    if (steps >= VIDEO_TILES) return 0;

    CURSOR = CURSOR + steps;

    // Outside screen bounds, reset!
    if (CURSOR >= VIDEO_TILES) CURSOR = CURSOR - VIDEO_TILES;

    long width_divide  = divide(CURSOR VIDEO_TILE_WIDTH);
    long height_divide = divide(CURSOR VIDEO_TILE_HEIGHT);

    CURSOR_X = right_shift_l(width_divide  16);
    CURSOR_Y = right_shift_l(height_divide 16);
    return 1;
}

/*  ADVANCE LINE - Advance the cursor one line
    
    Args:

    Returns:
     void -
*/
int advance_line() {
    CURSOR_Y = CURSOR_Y + 1;

    if (CURSOR_Y < VIDEO_TILE_HEIGHT) {
        CURSOR = (VIDEO_TILE_WIDTH * CURSOR_Y) + CURSOR_X;
    }
    // Outside screen bounds, reset!
    else {
        CURSOR   = CURSOR_X;
        CURSOR_Y = 0;
    }
}

/*  BACK LINE - Back the cursor one line
    
    Args:

    Returns:
     void -
*/
int back_line() {
    CURSOR_Y = CURSOR_Y - 1;

    if (CURSOR_Y >= 0) {
        CURSOR = (VIDEO_TILE_WIDTH * CURSOR_Y) + CURSOR_X;
    }
    // Outside screen bounds, reset!
    else {
        CURSOR   = CURSOR_X;
        CURSOR_Y = VIDEO_TILE_HEIGHT - 1;
    }
}

/*  NEW LINE - Advance the cursor to the next line
    
    Args:

    Returns:
     void -
*/
int new_line() {
    CURSOR_Y = CURSOR_Y + 1;

    if (CURSOR_Y < VIDEO_TILE_HEIGHT) {
        CURSOR = VIDEO_TILE_WIDTH * CURSOR_Y;
    }
    // Outside screen bounds, reset!
    else {
        CURSOR   = 0;
        CURSOR_Y = 0;
    }
    CURSOR_X = 0;
}

/*  PRINT C AT - Write a char to the screen at the given position
    
    Args:
     * Char - Char to output
     * Pos  - Position

    Returns:
     bool - returns false if invalid color or position is given
*/
int print_c_at(char c int pos) {

    if ((FG_COLOR >= PALETTE_SIZE) | (BG_COLOR >= PALETTE_SIZE)) return 0;

    // Build value according to the convetion:
    //   fg     bg       char
    // [  4  ][  4  ][     8     ]

    // Color
    int color = FG_COLOR;
    color = left_shift_i(color 4);
    color = color + BG_COLOR;
    color = left_shift_i(color 8);

    // Char
    int value = c;
    value = value + color;

    // Write and advance cursor
    return tile_index_write(value pos);
}

/*  PRINT C AT POS - Write a char to the screen at the given position
    
    Args:
     * Char - Char to output
     * X    - X position
     * Y    - Y position

    Returns:
     bool - returns false if invalid color or position is given
*/
int print_c_at_pos(char c int x int y) {
    return print_c_at(c x + (VIDEO_TILE_WIDTH * y));
}

/*  PRINT C - Write a char to the screen at the current position and 
              move the cursor.
    
    Args:
     * Char - Char to output

    Returns:
     bool - returns false if invalid color is given
*/
int print_c(char c) {

    // Write char and advance cursor
    if (print_c_at(c CURSOR)) {
        advance_cursor();
        return 1;
    }
    return 0;
}

/*  PRINT - Write a char buffer to the screen at the current position and 
            move the cursor.
    
    Args:
     * Char - Char pointer to the buffer to output

    Returns:
     bool - returns false if invalid color is given
*/
int print(char* cb_p) {
    while (*cb_p) {
        print_c(*cb_p);
        cb_p = cb_p + 1;
    }
}

/*  CLEAR - Clear the screen and reset the cursor
    
    Args:

    Returns:
     void -
*/
int clear() {
    int i = 0;
    while(i < VIDEO_TILES) {
        tile_index_write(0 i);
        i = i + 1;
    }

    CURSOR   = 0;
    CURSOR_X = 0;
    CURSOR_Y = 0;
}
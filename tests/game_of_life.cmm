
int out(int value) {
    asm ("out 0, $" value);
}

int sleep_ms(long ms) {
    long wait_until = ms * 3846;
    long count = 0;

    if (count) count = 0;

    while (count < wait_until) {
        count = count + 1;
    }
}

int print_buffer(char* buffer) {

    int i = 0;
    while (i < 1200) {
        int color;
        if (buffer[i]) {
            color = 0x0300;
        } else {
            color = 0x0000;
        }

        asm("vgaw $ $ 0" i color);
        i = i + 1;
    }
}

int add_changed(int* changed_buffer int* changed_index int tile) {
    changed_buffer[*changed_index] = tile;
    *changed_index = *changed_index + 1;
}

int update_changed(int* changed char* buffer int* changed_index) {

    int i = 0;

    out (i);

    while (i < *changed_index) {
        int tile = changed[i];

        if (buffer[tile])   buffer[tile] = 0; 
        else                buffer[tile] = 1;

        i = i + 1;
    }

    *changed_index = 0;
}

int main() {
    
    int changed[64];
    char buffer[1200];
    int gen_count = 0;
    int changed_index = 0;

    buffer[42] = 1;
    buffer[83] = 1;
    buffer[121] = 1;
    buffer[122] = 1;
    buffer[123] = 1;

    print_buffer(buffer);

    while (1) {

        // -------------------------
        // calculate next generation
        // -------------------------
        int tile = 0;
        int tile_x = 0;
        int tile_y = 0;

        out (gen_count);

        // Iterate over each tile
        while (tile < 1200) {
            
            int y = - 1;
            int neighbor_count = 0;
            out (tile);

            while (y < 2) {
                int x = -1;

                out (tile);
                while (x < 2) {

                    if ((x == 0) & (y == 0)) continue 0;

                    int pos_x = tile_x + x;
                    int pos_y = tile_y + y;

                    int position = pos_x + (pos_y * 40);
                    neighbor_count = neighbor_count + buffer[tile];

                    x = x + 1;
                }
                y = y + 1;
            }

            if (buffer[tile]) {

                if ((neighbor_count < 2) | (neighbor_count > 3)) {
                    changed[changed_index] = tile;
                    changed_index = changed_index + 1;
                }

            } else {

                if (neighbor_count == 3) {
                    changed[changed_index] = tile;
                    changed_index = changed_index + 1;
                }
            }

            tile = tile + 1;
            tile_x = tile_x + 1;

            if (tile_x >= 40) {
                tile_y = tile_y + 1;
                tile_x = 0;
            }
        }

        // Update buffer
        int i = 0;
        out (i);
        while (i < changed_index) {
            int tile_index = changed[i];

            if (buffer[tile_index]) buffer[tile_index] = 0;
            else                    buffer[tile_index] = 1;

            i = i + 1;
        }

        changed_index = 0;

        print_buffer(buffer);
        gen_count = gen_count + 1;
        sleep_ms(1000);
    }


}
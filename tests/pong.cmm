/*
  TSEA83 project 
  
  Test for simple pong game
*/

#include ../std_lib/std_lib.cmm
#include ../std_lib/shift.cmm
#include ../std_lib/math.cmm
#include ../std_lib/video.cmm
#include ../std_lib/string.cmm
#include ../std_lib/print.cmm
#include ../std_lib/keyboard.cmm

// Game constants
int width = 40;
int height = 30;

int player_height = 5;

int score1_x = 1;
int score1_y = 1;
int score2_x = 38;
int score2_y = 1;

int win_score = 3;

char bg = 0;
char wall = 1;
char ball = 2;
char score1 = 3;
char score2 = 4;

int main() {
    // Input variables
    char keyboard = 0;

    // Game variables
    char board[(40*30)];

    // Loop variables
    int i = 0;

    // Set color palette
    palette_index_write(0 PURE_BLACK PURE_BLACK);    // background
    palette_index_write(1 TEMPLE_BLUE TEMPLE_BLUE);  // wall
    palette_index_write(2 PURE_PINK PURE_BLACK);     // ball
    palette_index_write(3 TEMPLE_YELLOW PURE_BLACK); // score

    // Main program loop
    while (1) {
      // Setup variables
      int game_running = 1;
      int p1score = 0;
      int p2score = 0;
      int winner = 0;

      int ball_x = 19;
      int ball_y = 14;
      int ball_d_x = 1;
      int ball_d_y = 1;

      int p1_y = 2;
      int p1_x = 12;
      
      int p2_x = 37;
      int p2_y = 12;

      // Setup gameboard
      // Setup wallS
      i = 0;
      while (i < width) {
        // Upper wall
        board[i] = wall;
        board[(39*width) + i] = wall;
        i = i + 1;
      }
      // Setup players
      i = 0;
      while (i < player_height) {
        board[((p1_y+i)*width) + p1_x] = wall;
        board[((p2_y+i)*width) + p2_x] = wall;
        i = i + 1;
      }
      // Setup ball
      board[(ball_y*width) +  ball_x] = ball;

      // Setup score
      board[(score1_y*width) + score1_x] = score;
      board[(score2_y*width) + score2_x] = score;
      
      // Main game loop
      while (game_running == 1) {
        // Read keyboard, update player pos
        keyboard = read_char();

        if (keyboard == 27) {
          // ESCAPE quit program
          return; 
        } else if (keyboard = 's') {
          // Check bounds
          // P1 move down
        } else if (keyboard = 'w') {
          // Check bounds
          // P1 move up
        } else if (keyboard = 'l') {
          // Check bounds
          // P2 move down
        } else if (keyboard = 'o') {
          // Check bounds
          // P2 move up
        }

        // Update ball position


        // Check collision, update score if necessary

        // Draw board and score
        i = 0;
        char curr = 0;
        while (i < width*height) {
          curr = board[i];
          if (curr == bg) {
            BG_COLOR = 0;
            print_c_at_pos(' ' i);
          } else if (curr == wall) {
            BG_COLOR = 1;
            print_c_at_pos(' ' i);
          } else if (curr == ball) {
            FG_COLOR = 2;
            BG_COLOR = 2;
            print_c_at_pos(4 i); // @ at i pos
          } else if (curr == score1) {
            FG_COLOR = 3;
            BG_COLOR = 3;
            print_c_at_pos((p1score + 30) i);
          } else if (curr == score2) {
            FG_COLOR = 3;
            BG_COLOR = 3;
            print_c_at_pos((p2score + 30) i);
          }
        }

        // Check points, end game if should
        if (p1score >= win_score) {
          // P1 wins
          winner = 1;
          game_running = 0;
        } else if (p2score >= win_score) {
          // P2 wins
          winner = 2;
          game_running = 0;
        }

      }
      
      // Print after game message and play again?


      // Check if play again or quit
      int play_again = 0;
      while (play_again == 0) {
        keyboard = read_char();

        if (keyboard == '\n') {
          play_again = 1;
        } else if (keyboard == 27) { 
          // ESCAPE
          return;
        }
      } 

      // If somehow comes here, exit
      return;
    }
  }
}